#!/usr/bin/env perl
#
# Build a HTML tree from the Act POD manual.

use strict;

##########################
package MyView;
use base 'Pod::POM::View::HTML';

my $prefix = 'Act::';
my $CPAN_base = 'https://metacpan.org/pod';

sub page_depth
{
    my $self = shift;
    if (@_) {
        $self->{_act_makedoc_depth} = shift;
    }
    return $self->{_act_makedoc_depth};
}

sub view_pod
{
    my ($self, $pod) = @_;
    return $pod->content->present($self);
}
sub view_seq_text {
     my ($self, $text) = @_;

     my $HTML_PROTECT = 0;
     my $urls = '(' . join ('|',
                            qw{
                                  http
                                  https
                                  telnet
                                  mailto
                                  news
                                  gopher
                                  file
                                  wais
                                  ftp
                          } ) . ')';

     my $ltrs = '\w';
     my $gunk = '/#~:.?+=&%@!\-';
     my $punc = '.:!?\-;';
     my $any  = "${ltrs}${gunk}${punc}";

     unless ($HTML_PROTECT) {
         for ($text) {
             s/&/&amp;/g;
             s/</&lt;/g;
             s/>/&gt;/g;
         }
     }

     $text =~ s{
        \b                           # start at word boundary
        (?<!\|)                      # but not immediately after a |
         (                           # begin $1 {
           $urls     :               # need resource and a colon
           (?!:)                     # Ignore File::, among others.
           [$any] +?                 # followed by one or more of any valid
                                     #   character, but be conservative and
                                     #   take only what you need to....
         )                           # end   $1  }
         (?=                         # look-ahead non-consumptive assertion
                 [$punc]*            # either 0 or more punctuation followed
                 (?:                 #   followed
                     [^$any]         #   by a non-url char
                     |               #   or
                     $               #   end of the string
                 )                   #
             |                       # or else
                 $                   #   then end of the string
         )
       }{<a href="$1">$1</a>}igox;

     return $text;
}
sub view_seq_link {
    my ($self, $link) = @_;

    # view_seq_text has already taken care of L<http://example.com/>
    if ($link =~ /^<a href=/ ) {
        return $link;
    }

    # full-blown URL's are emitted as-is
    if ($link =~ m{^\w+://}s ) {
        return make_href($link);
    }

    $link =~ s/\n/ /g;   # undo line-wrapped tags

    my $orig_link = $link;
    my $linktext;
    # strip the sub-title and the following '|' char
    if ( $link =~ s/^ ([^|]+) \| //x ) {
        $linktext = $1;
    }

    # make sure sections start with a /
    $link =~ s|^"|/"|;

    my $page;
    my $section;
    if ($link =~ m{^\w+://}s ) { # L<Perl homepage|https://www.perl.org/>
        return make_href($link,$linktext);
    }
    elsif ($link =~ m|^ (.*?) / "? (.*?) "? $|x) { # [name]/"section"
        ($page, $section) = ($1, $2);
    }
    elsif ($link =~ /\s/) {  # this must be a section with missing quotes
        ($page, $section) = ('', $link);
    }
    else {
        ($page, $section) = ($link, '');
    }

    # warning; show some text.
    $linktext = $orig_link unless defined $linktext;

    my $url = '';
    if (defined $page && length $page) {
        $url = $self->view_seq_link_transform_path($page);
    }

    # append the #section if exists
    $url .= "#$section" if defined $url and
        defined $section and length $section;

    return make_href($url, $linktext);
}
sub make_href {
    my($url, $title) = @_;

    if (!defined $url) {
        return defined $title ? "<i>$title</i>"  : '';
    }

    $title = $url unless defined $title;
    #print "$url, $title\n";
    return qq{<a href="$url">$title</a>};
}


sub view_seq_link_transform_path
{
    my ($self, $page) = @_;
    if ($page =~ /^$prefix/) {
        # a link to another man page
        $page =~ s/^$prefix//;
        $page =~ s|::|/|g;
        return '../' x $self->page_depth . $page . '.html';
    }
    elsif ($page =~ /^http/) {
        return $page;
    }
    elsif ($page =~ /::/) {
        return "$CPAN_base/$page";
    }
    warn "unknown link: $page\n";
    return;
}

###########################
package main;

use File::Basename        qw(dirname);
use File::Find            qw(find);
use File::Path            qw(mkpath);
use File::Spec::Functions qw(catfile);
use FindBin               qw($Bin);
use Getopt::Long          qw(GetOptions);
use Pod::POM              qw();
use Pod::Usage            qw(pod2usage);
use Template              qw();

# parse command line
my ($help, $verbose, $dryrun, $force, $acthome, $baseurl);
Getopt::Long::Configure('bundling');
GetOptions(
    'help|h'    => \$help,
    'verbose|v' => \$verbose,
    'dryrun|n'  => \$dryrun,
    'force|f'   => \$force,
    'acthome:s' => \$acthome,
    'baseurl:s' => \$baseurl,
) or pod2usage(0);
pod2usage(1) if $help;
$acthome ||= "$Bin/..";
$baseurl ||= '';
my $srcdir  = catfile($acthome, "lib/Act");
-d $srcdir or pod2usage("Can't determine ACTHOME");
my $destdir = shift or pod2usage("You must specify a destination directory!");

# create POD parser and view and template objects
my $parser = Pod::POM->new(warn => 1);
my $view_html = MyView->new;
my $template = Template->new(
   INCLUDE_PATH => catfile($acthome, qw(templates manual)),
   UNICODE  => 1,
   ENCODING => 'UTF-8',
);

# find all pod files
my @files;
my $wanted = sub {
    $File::Find::prune = 1 if -d && /\A(?:CVS|\.svn)\b/;
    -f && /.pod$/ && push @files, $File::Find::name;
};
find( $wanted, $srcdir );

# convert pod to html
for my $pathname (@files) {
    # filename relative to source directory
    (my $file = $pathname) =~ s|^$srcdir/||;
    print "$file" if $verbose;

    # determine pathname of output file
    (my $outputfile = $file) =~ s/\.pod$/.html/;
    $outputfile = catfile($destdir, $outputfile);
    print "  => $outputfile\n" if $verbose;
    next if $dryrun;

    # check timestamps
    if (!$force && (stat($pathname))[9] <= (stat($outputfile))[9] ) {
        print "  up to date, skipping\n" if $verbose;
        next;
    }

    # read file
    my $pod = do {
        local $/ = undef;
        open my $fh, '<:encoding(UTF-8)', $pathname
            or die "can't open $pathname for reading: $!\n";
        <$fh>;
    };
    # determine this file's depth within the tree,
    # this will be used by the view to make relative links
    my $depth = () = $file =~ m|/|g;
    $view_html->page_depth($depth);

    # parse and render the POD
    my $pom = $parser->parse_text($pod);
    my $html = $pom->present($view_html);

    # create destination directory
    my $dir = dirname($outputfile);
    -d $dir or mkpath($dir);

    # retrieve title
    (my $title = $file) =~ s|/|::|g;
    $title =~ s/\.pod//;
    $title = "Act::$title";
    (my $head1) = $pom->head1();
    $title = join ' - ', $title, $head1->title;

    # process file through our page template
    open my $fh, '>:encoding(UTF-8)', $outputfile
        or die "can't open $outputfile for writing: $!\n";
    $template->process(
        'page',
        {
          content => $html,
          title   => $title,
          baseurl => $baseurl,
        },
        $fh);
}
__END__

=head1 NAME

makedoc - build HTML tree from Act's POD documenation (Act::Manual)

=head1 SYNOPSIS

makedoc [options] destination_directory

 Options:
   -a, --acthome <acthome>     specify alternate ACTHOME
   --baseurl <url>             specify static resource root URL
   -f, --force                 force rebuild (ignore timestamps)
   -h, --help                  prints brief help text
   -n, --dryrun                dry run
   -v, --verbose               verbose

=head1 OPTIONS

=over 4

=item B<--help>

Prints a brief help message and exits.

=item B<--acthome>

Specify an alternate Act home directory. C<makedoc> will look for POD files
in that directory's F<lib/Act> subdirectory.

Defaults to the parent directory

=item B<--dryrun>

Processes the POD files without saving them.

=item B<--force>

Processes each file even if the destination file is up to date.

=item B<--baseurl>

Specify the URL of the root of the mandocs. It is prepended to links to static
resources such as CSS stylesheets and image files.
Do not include a trailing slash.

Defaults to the empty string.

Example:

Build the HTML docs as a subdirectory the root of an Act checkout, and use the supplied static
resources (images and stylesheets) files in F<mandocs/>:

  act% bin/makedoc --baseurl=${PWD}/mandocs docs

This will create an HTML tree suitable for local (C<file://>) viewing.

=item B<--verbose>

Prints information on each processed POD file.

=back

=head1 DESCRIPTION

B<makedoc> converts the Act manual's POD file tree into an HTML file tree.
It doesn't rely on a correctly configured running Act installation,
only on a directory where pod files can be found in F<lib/Act/>.

=cut
