=head1 Act templates

=head1 THE FULL LIST OF ALL ACT TEMPLATES

This page documents B<all> templates used within the Act framework.

All templates listed here exist in Act. If you add template files to
your conference F<templates/> directory, they will override the default
Act templates.

=head1 TEMPLATES YOU SHOULD MODIFY

=head2 User Interface

These templates define the look of your conference.

=over 4

=item * B<F<ui>>

This is the master template, included by every other template in the system.
It's used as a C<WRAPPER> template by the Act system, ensuring all generated
pages shares the same headers, titles, and footers.

You're strongly advised to use it as a C<WRAPPER> template on your I<static>
pages as well.

=item * B<F<menu>>

There is no default B<F<menu>> template. You must create one before you start
using Act.

=item * B<F<menus/item>>

There is no default B<F<menus/item>> template. You must create one before you start
using Act.

=item * B<F<menus/section>>

There is no default B<F<menus/section>> template. You must create one before you
start using Act.

=item * B<F<error_ui>>

This template defines the look of the error messages within Act.
You probably should simply add an C<error> class to your CSS.

This is the original template (all of it, actually):

    <span class="error">[% content %]</span>
    <br />

=back

=head1 TEMPLATES YOU MAY WANT TO MODIFY

Many templates actually include other templates that contain the actual
Act logic. You may want to add specific information to them.

=over 4

=item * B<F<talk/schedule>>

This is the main schedule template. Change it if you want to add information
around the schedule table. See L<http://conferences.yapceurope.org/2003/>
for an example.

=back

=head1 TEMPLATES YOU SHOULD NOT OVERRIDE

=head2 Talk templates

Those templates manage visualization of information on talks.

=over 4

=item * B<F<talk/add>>

=item * B<F<talk/ical>>

=item * B<F<talk/list>>

=item * B<F<talk/show>>

=item * B<F<talk/removed>>

=item * B<F<talk/added>>

=item * B<F<talk/notify_subject>>

=item * B<F<talk/import>>

=item * B<F<talk/schedule_table>>

This is the schedule itself. Don't forget to include it if you set up
your own version of F<talk/schedule>.

=item * B<F<talk/notify_body>>

=item * B<F<talk/talk_list>>

=back

=head2 User templates

=over 4

=item * B<F<user/add>>

=item * B<F<user/create>>

=item * B<F<user/updatepassword>>

=item * B<F<user/fake_payment>>

=item * B<F<user/list>>

=item * B<F<user/main>>

=item * B<F<user/show>>

=item * B<F<user/added>>

=item * B<F<user/photo>>

=item * B<F<user/stats>>

=item * B<F<user/purchase>>

=item * B<F<user/change>>

=item * B<F<user/rights>>

=item * B<F<user/unregister>>

=item * B<F<user/payment>>

=item * B<F<user/search_form>>

=item * B<F<user/reset_password_subject>>

=item * B<F<user/reset_password_body>>

=item * B<F<user/register>>

=item * B<F<user/forms/new_user>>

=item * B<F<error>>

This templates uses C<error_ui> template to format the output. It receives an
error id list through the C<errors> parameter, fetch the corresponding message
from the C<msgs> hash nad chooses the selected language using the
C<global.request.language> parameter, before calling C<error_ui> to format the
message.

=back


=head2 Event templates

=over 4

=item * B<F<event/add>>


=item * B<F<event/list>>


=item * B<F<event/show>>


=item * B<F<event/removed>>


=item * B<F<event/added>>

=back

=head2 Login template

=over 4

=item * F<B<login>>

The login page is used every time Act needs to authenticate a user.

B<F<login>> template calls B<F<ui>> as B<C<WRAPPER>> for the header and footer
stuff.

It expects an action uri string representation to be passed as the B<C<action>>
parameter. It also expects a B<C<destination>> uri to be passed in case you
need to redirect the user to another page upon authentication).

It will provide two fields for collecting credentials: B<C<credential_0>> for
username and B<C<credential_1>> for password, and a checkbox
B<C<credential_2>> to record whether a login should be remembered on the client
computer.

The template will also provide a true value for the B<C<join>> parameter,
meaning that the user pressed the submit button.

=item * F<B<logout>>

The standard logout template is not useful. It only provides information
stating that you just logged out from the system, no extra actions or other
possibilities.

=back

=head2 Menu templates

=over 4

=item * B<F<menus/user>>


=item * B<F<menus/admin>>


=item * B<F<menus/talks>>


=item * B<F<menus/users>>


=item * B<F<menus/talks_body>>

=item * B<F<menus/talks_head>>


=item * B<F<menus/events>>


=item * B<F<menus/treasurer>>


=item * B<F<menus/act_confs>>


=back

=head2 Error template

=over 4


=back


=head1 TEMPLATES YOU SHOULD NOT REPLACE

Or you'll break your site.

=head2 Core Templates

Core templates implement internal important template-processing routines that
the system relays on to implement certain tasks.

Don't override them unless you know what you're doing.

=over 4

=item * B<F<core/talk/schedule>>

=item * B<F<core/user/add>>

=item * B<F<core/user/purchase>>

=item * B<F<core/user/create>>

=item * B<F<core/user/rights>>

=item * B<F<core/user/register>>

=item * B<F<core/twostep/ok>>

=item * B<F<core/twostep/form>>

=item * B<F<core/twostep/email_subject>>

=item * B<F<core/twostep/email_body>>

=back

=head2 Common macros

=over 4

=item * B<F<common>>

This template defines commonly used macros.

=item * B<Macro Documentation>

Those macros can be found at the B<F<common>> template source.

=over 4

=item * B<C<talk_link(talk)>>

Receives a talk object as the first parameter;

Creates a link to the given Talk Info page, using the talk title as the link
name. It will make the talk title bold if the talk is already accepted for the
conference.

This calls C<make_uri_info()> function passing using the C<talk.id> field to
identify the talk and build the link. It will also use the C<talk.title> field
for the link text and C<talk.accepted> field to decide about format.

=item * B<C<talk_confirmed_link(talk)>>

Receives a talk object as the first parameter;

Creates a link to the given talk info page, using the talk title as the link
name. It will make the talk title bold if the talk is already confirmed for the
conference.

This calls C<make_uri_info()> function using the C<talk.id> field to
identify the talk and build the link. It will also use the C<talk.title> field
for the link text and C<talk.confirmed> field to decide about formatting.

=item * B<C<talk_modify_link(talk)>>

Receives a talk object as the first parameter;

Buid a "modify talk" link that allows one of the organizers or the talk owner
to change it. Organizers always can change a talk, it doesn't matter the
current status of the conference. Talk owners only can change a talk
until the organizers unset both the B<C<talks_submissions_open>> and
B<C<talks_edition_open>> configuration options.

=item * B<C<event_link(event)>>

Receives an C<Act::Event> object as parameter;

Returns a link to the event information page for this event object, using
C<event.title> as the link text.

=item * B<C<event_modify_link(event)>>

Receives an C<Act::Event> object as parameter;

Builds a link to the B<editevent> page, allowing only event organizers to edit
the event properties.

=item * B<C<user_info(user)>>

Receives an C<Act::User> object as parameter.

Builds a link to the user information page, either using the C<user.nick_name>
(if C<user.pseudonymous> is on) as the link text or the classical "First-Last
name (nickname)" format.

=item * B<C<timeslot(t)>>

Receives as input either an C<Act::Talk> or an C<Act:Event> object, and
returns:

For C<Act::Talk>s, a link for the user information page, a link for the talk
(bold indicates talk already confirmed) and the talk duration in minutes; Also
adds up information about the track this talk is included into.

For C<Act::Event>s, a link for the event information page, and the event
duration in minutes.

For anything else, this macro just will return the parameter passed into,
becoming as harmless as possible.

=back

=back

=head2 Payment templates

=over 4

=item * F<B<payment/list>>

=item * F<B<payment/notify_subject>>

=item * F<B<payment/confirm_invoice>>

=item * F<B<payment/payment>>

=item * F<B<payment/notify_body>>

=item * F<B<payment/invoice>>

=back


=cut

